---
// src/pages/admin.astro v24.9 (Enhanced Statistics Dashboard)
// Admin Dashboard - Enhanced Statistics Integration
// ‚úÖ √ÑNDERUNGEN v24.9:
// - Enhanced Statistics Cards (W√∂chentlich/Monatlich/Conversion Rate)
// - Service-Performance Breakdown
// - Peak-Time Analysis
// - Zeitraum-Vergleiche
// - Business Intelligence Dashboard

export const prerender = false;

import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro'; 
import AdminStyles from '../components/AdminStyles.astro';

const pageTitle = "Admin Dashboard - Enhanced Statistics";
const version = "Admin Dashboard v24.9 (Enhanced Statistics Dashboard)";

// Environment Variables sicher laden (Server-Side)
const adminUsername = import.meta.env.ADMIN_USERNAME || 'admin';
const adminPassword = import.meta.env.ADMIN_PASSWORD || 'admin';

console.log('üìä Admin Dashboard v24.9 loaded - Enhanced Statistics Dashboard');
---

<Layout 
  title="Admin Dashboard | Dominik Maier"
  description="Admin Dashboard f√ºr Kontaktanfragen - Enhanced Statistics"
>
  <!-- Separate Admin Styles -->
  <AdminStyles />
  
  <Header />
  
  <main>
    <!-- Admin Section -->
    <section class="py-16 bg-gray-50 dark:bg-gray-900 min-h-80vh">
      <div class="admin-container">
        
        <!-- Alpine.js Admin App - Enhanced Statistics -->
        <div x-data="{
          version: 'Admin Dashboard v24.9 (Enhanced Statistics)',
          isLoggedIn: false,
          showLoginForm: true,
          
          // Admin Credentials - werden aus globalem Script geladen
          adminUsername: '',
          adminPassword: '',
          
          // Login Data
          loginData: {
            username: '',
            password: ''
          },
          loginError: '',
          isLoading: false,
          
          // Contacts Data
          contacts: [],
          contactsLoading: false,
          contactsError: '',
          selectedContact: null,
          filterStatus: 'alle',
          stats: {
            total: 0,
            new: 0,
            contacted: 0,
            converted: 0,
            archived: 0
          },
          
          // ===== NEW v24.9: Enhanced Statistics Data =====
          enhancedStats: {
            timeframe: { thisWeek: 0, thisMonth: 0, lastMonth: 0, total: 0 },
            conversion: { rate: 0, converted: 0, pending: 0 },
            types: { leads: 0, normal: 0, leadPercentage: 0 }
          },
          serviceBreakdown: {
            services: [],
            total: 0
          },
          timeAnalysis: {
            peak: {
              hours: [],
              day: null,
              timeSlot: null
            }
          },
          statisticsLoading: false,
          statisticsError: '',
          
          // ===== INITIALIZATION =====
          init() {
            console.log('üöÄ Admin Dashboard v24.9 init - Enhanced Statistics...');
            
            // Credentials aus globalem Script laden
            if (window.ADMIN_CREDENTIALS) {
              this.adminUsername = window.ADMIN_CREDENTIALS.username;
              this.adminPassword = window.ADMIN_CREDENTIALS.password;
              console.log('‚úÖ Credentials loaded v24.9');
            } else {
              console.log('‚ö†Ô∏è No Environment Variables found, using fallback v24.9');
              this.adminUsername = 'admin';
              this.adminPassword = 'admin';
            }
          },
          
          // ===== LOGIN FUNCTIONS =====
          async login() {
            console.log('üîê Login attempt v24.9 - Enhanced Statistics Dashboard');
            this.isLoading = true;
            this.loginError = '';
            
            try {
              if (this.loginData.username === this.adminUsername && 
                  this.loginData.password === this.adminPassword) {
                this.isLoggedIn = true;
                this.showLoginForm = false;
                this.loginError = '';
                await this.loadAllData();
                console.log('‚úÖ Login successful - Loading Enhanced Statistics v24.9');
              } else {
                this.loginError = 'Ung√ºltige Anmeldedaten';
                console.log('‚ùå Login failed v24.9');
              }
            } catch (error) {
              this.loginError = 'Verbindungsfehler. Bitte versuchen Sie es erneut.';
              console.error('‚ùå Login error v24.9:', error);
            }
            
            this.isLoading = false;
          },
          
          async logout() {
            console.log('üö™ Logout v24.9');
            this.isLoggedIn = false;
            this.showLoginForm = true;
            this.loginData.username = '';
            this.loginData.password = '';
            this.selectedContact = null;
            this.contacts = [];
            this.resetStatistics();
          },
          
          // ===== DATA LOADING FUNCTIONS =====
          async loadAllData() {
            console.log('üìä Loading all data including Enhanced Statistics v24.9');
            await Promise.all([
              this.loadContacts(),
              this.loadStats(),
              this.loadEnhancedStatistics()
            ]);
          },
          
          async loadContacts() {
            console.log('üìã Loading contacts from Supabase API v24.9');
            this.contactsLoading = true;
            this.contactsError = '';
            
            try {
              const response = await fetch('/api/contact?action=list');
              
              if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
              }
              
              const data = await response.json();
              
              if (data.contacts) {
                this.contacts = data.contacts.map(contact => ({
                  ...contact,
                  status: this.mapSupabaseStatus(contact.status),
                  leadForm: contact.leadForm || false
                })).sort((a, b) => 
                  new Date(b.created_at) - new Date(a.created_at)
                );
                
                console.log('‚úÖ Contacts loaded v24.9:', this.contacts.length, 'contacts');
              } else {
                throw new Error('Ung√ºltige API-Response');
              }
              
            } catch (error) {
              console.error('‚ùå Error loading contacts v24.9:', error);
              this.contactsError = `Fehler beim Laden der Kontakte: ${error.message}`;
              this.contacts = [];
            }
            
            this.contactsLoading = false;
          },
          
          async loadStats() {
            console.log('üìä Loading basic stats v24.9');
            
            try {
              const response = await fetch('/api/contact?action=stats');
              
              if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
              }
              
              const data = await response.json();
              
              if (data.stats) {
                this.stats = {
                  total: data.stats.total || 0,
                  new: data.stats.new || 0,
                  contacted: data.stats.contacted || 0,
                  converted: data.stats.converted || 0,
                  archived: data.stats.archived || 0
                };
                
                console.log('‚úÖ Basic stats loaded v24.9:', this.stats);
              }
              
            } catch (error) {
              console.error('‚ùå Error loading basic stats v24.9:', error);
              this.calculateLocalStats();
            }
          },
          
          // ===== NEW v24.9: ENHANCED STATISTICS LOADING =====
          async loadEnhancedStatistics() {
            console.log('üìä Loading Enhanced Statistics v24.9');
            this.statisticsLoading = true;
            this.statisticsError = '';
            
            try {
              // Parallel loading f√ºr bessere Performance
              const [enhancedResponse, serviceResponse, timeResponse] = await Promise.all([
                fetch('/api/contact?action=enhanced-stats'),
                fetch('/api/contact?action=service-breakdown'),
                fetch('/api/contact?action=time-analysis')
              ]);
              
              if (!enhancedResponse.ok || !serviceResponse.ok || !timeResponse.ok) {
                throw new Error('Enhanced Statistics API Error');
              }
              
              const enhancedData = await enhancedResponse.json();
              const serviceData = await serviceResponse.json();
              const timeData = await timeResponse.json();
              
              this.enhancedStats = enhancedData.enhancedStats || this.enhancedStats;
              this.serviceBreakdown = serviceData.serviceBreakdown || this.serviceBreakdown;
              this.timeAnalysis = timeData.timeAnalysis || this.timeAnalysis;
              
              console.log('‚úÖ Enhanced Statistics loaded v24.9:', {
                timeframe: this.enhancedStats.timeframe,
                services: this.serviceBreakdown.services.length,
                peakHours: this.timeAnalysis.peak.hours.length
              });
              
            } catch (error) {
              console.error('‚ùå Error loading Enhanced Statistics v24.9:', error);
              this.statisticsError = `Enhanced Statistics: ${error.message}`;
            }
            
            this.statisticsLoading = false;
          },
          
          resetStatistics() {
            this.enhancedStats = {
              timeframe: { thisWeek: 0, thisMonth: 0, lastMonth: 0, total: 0 },
              conversion: { rate: 0, converted: 0, pending: 0 },
              types: { leads: 0, normal: 0, leadPercentage: 0 }
            };
            this.serviceBreakdown = { services: [], total: 0 };
            this.timeAnalysis = { peak: { hours: [], day: null, timeSlot: null } };
          },
          
          // ===== CONTACT MANAGEMENT (UNVER√ÑNDERT) =====
          async updateContact(contactId, updateData) {
            console.log('üîÑ Updating contact via Supabase API v24.9:', { contactId, updateData });
            
            try {
              if (updateData.status) {
                updateData.status = this.mapAdminStatus(updateData.status);
              }
              
              const response = await fetch(`/api/contact?id=${contactId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(updateData)
              });
              
              if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
              }
              
              const data = await response.json();
              
              if (data.success) {
                const contact = this.contacts.find(c => c.id === contactId);
                if (contact) {
                  Object.assign(contact, updateData);
                  contact.updated_at = new Date().toISOString();
                  if (updateData.status) {
                    contact.status = this.mapSupabaseStatus(updateData.status);
                  }
                }
                
                await this.loadStats();
                await this.loadEnhancedStatistics();
                
                console.log('‚úÖ Contact updated - Enhanced Statistics reloaded v24.9');
              } else {
                throw new Error(data.error || 'Update failed');
              }
              
            } catch (error) {
              console.error('‚ùå Error updating contact v24.9:', error);
              alert(`Fehler beim Aktualisieren des Kontakts: ${error.message}`);
            }
          },
          
          async updateContactLeadStatus(contactId, newLeadStatus) {
            await this.updateContact(contactId, { leadForm: newLeadStatus });
          },
          
          async updateContactStatus(contactId, newStatus) {
            await this.updateContact(contactId, { status: newStatus });
          },
          
          async saveContactDetails(contactId, details) {
            await this.updateContact(contactId, details);
          },
          
          // ===== STATUS MAPPING FUNCTIONS (UNVER√ÑNDERT) =====
          mapSupabaseStatus(supabaseStatus) {
            switch(supabaseStatus) {
              case 'new': return 'neu';
              case 'contacted': return 'offen';
              case 'converted': return 'abgeschlossen';
              case 'archived': return 'abgeschlossen';
              default: return 'neu';
            }
          },
          
          mapAdminStatus(adminStatus) {
            switch(adminStatus) {
              case 'neu': return 'new';
              case 'offen': return 'contacted';
              case 'abgeschlossen': return 'converted';
              default: return 'new';
            }
          },
          
          // ===== HELPER FUNCTIONS =====
          getStatusClass(status) {
            switch(status) {
              case 'neu': return 'admin-badge admin-badge-neu';
              case 'offen': return 'admin-badge admin-badge-offen';  
              case 'abgeschlossen': return 'admin-badge admin-badge-abgeschlossen';
              default: return 'admin-badge';
            }
          },
          
          getStatusIcon(status) {
            switch(status) {
              case 'neu': return 'üî¥';
              case 'offen': return 'üü°';
              case 'abgeschlossen': return '‚úÖ';
              default: return '‚ö™';
            }
          },
          
          filteredContacts() {
            if (this.filterStatus === 'alle') {
              return this.contacts;
            } else if (this.filterStatus === 'aktiv') {
              return this.contacts.filter(contact => 
                contact.status === 'neu' || contact.status === 'offen'
              );
            }
            return this.contacts.filter(contact => contact.status === this.filterStatus);
          },
          
          getStatusCount(status) {
            return this.contacts.filter(contact => contact.status === status).length;
          },
          
          getActiveCount() {
            return this.contacts.filter(contact => 
              contact.status === 'neu' || contact.status === 'offen'
            ).length;
          },
          
          calculateLocalStats() {
            this.stats = {
              total: this.contacts.length,
              new: this.getStatusCount('neu'),
              contacted: this.getStatusCount('offen'),
              converted: this.getStatusCount('abgeschlossen'),
              archived: 0
            };
          },
          
          formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('de-DE');
          },
          
          formatTime(dateString) {
            const date = new Date(dateString);
            return date.toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit' });
          },
          
          getRelativeTime(dateString) {
            const now = new Date();
            const date = new Date(dateString);
            const diffInMinutes = Math.floor((now - date) / (1000 * 60));
            
            if (diffInMinutes < 60) {
              return `vor ${diffInMinutes} Min.`;
            } else if (diffInMinutes < 24 * 60) {
              const hours = Math.floor(diffInMinutes / 60);
              return `vor ${hours} Std.`;
            } else {
              const days = Math.floor(diffInMinutes / (24 * 60));
              return `vor ${days} Tag${days > 1 ? 'en' : ''}`;
            }
          }
        }">

          <!-- ===== LOGIN FORM (UNVER√ÑNDERT) ===== -->
          <div x-show="showLoginForm" class="max-w-lg mx-auto">
            <div class="admin-card">
              <div class="admin-card-body">
                <div class="text-center mb-8">
                  <div class="admin-icon">üìä</div>
                  <h1 class="admin-title">Enhanced Statistics Dashboard</h1>
                  <p class="text-gray-600 dark:text-gray-300 mb-2">
                    Business Intelligence & Analytics v24.9
                  </p>
                  <p class="text-xs text-gray-500 dark:text-gray-400" x-text="version"></p>
                </div>
                
                <form @submit.prevent="login()" class="admin-space-y-6">
                  <div>
                    <label for="username" class="admin-label">Benutzername</label>
                    <input 
                      type="text" 
                      id="username"
                      x-model="loginData.username"
                      :disabled="isLoading"
                      required
                      placeholder="Benutzername"
                      class="admin-input"
                    >
                  </div>
                  
                  <div>
                    <label for="password" class="admin-label">Passwort</label>
                    <input 
                      type="password" 
                      id="password"
                      x-model="loginData.password"
                      :disabled="isLoading"
                      required
                      placeholder="Passwort"
                      class="admin-input"
                    >
                  </div>
                  
                  <div x-show="loginError" class="admin-alert admin-alert-error">
                    <span x-text="loginError"></span>
                  </div>
                  
                  <button 
                    type="submit"
                    :disabled="isLoading"
                    class="admin-btn admin-btn-primary w-full"
                  >
                    <span x-show="!isLoading">Anmelden</span>
                    <span x-show="isLoading" class="admin-flex-center">
                      <div class="admin-spinner mr-2"></div>
                      Wird angemeldet...
                    </span>
                  </button>
                </form>
                
                <div class="text-center mt-6">
                  <p class="text-xs text-gray-500 dark:text-gray-400">
                    Admin Dashboard v24.9 - Enhanced Statistics
                  </p>
                </div>
              </div>
            </div>
          </div>

          <!-- ===== ENHANCED STATISTICS DASHBOARD ===== -->
          <div x-show="isLoggedIn" style="display: none;">
            
            <!-- Header -->
            <div class="admin-flex-between mb-8 flex-col lg:flex-row gap-4">
              <div>
                <h1 class="admin-title">üìä Enhanced Statistics Dashboard</h1>
                <p class="text-gray-600 dark:text-gray-300 mb-1">
                  Business Intelligence & Analytics v24.9
                </p>
                <p class="text-xs text-gray-500 dark:text-gray-400" x-text="version"></p>
              </div>
              <div class="flex gap-3">
                <button @click="loadAllData()" class="admin-btn admin-btn-secondary">
                  üîÑ Neu laden
                </button>
                <button @click="logout()" class="admin-btn admin-btn-secondary">
                  üö™ Abmelden
                </button>
              </div>
            </div>

            <!-- Loading State -->
            <div x-show="contactsLoading || statisticsLoading" class="text-center py-8">
              <div class="admin-spinner mx-auto mb-4" style="width: 2rem; height: 2rem;"></div>
              <p class="text-gray-600 dark:text-gray-300">
                <span x-show="contactsLoading">Lade Kontakte...</span>
                <span x-show="statisticsLoading">Lade Enhanced Statistics...</span>
              </p>
            </div>

            <!-- Error States -->
            <div x-show="contactsError || statisticsError" class="space-y-4 mb-6">
              <div x-show="contactsError" class="admin-alert admin-alert-error">
                <span x-text="contactsError"></span>
              </div>
              <div x-show="statisticsError" class="admin-alert admin-alert-error">
                <span x-text="statisticsError"></span>
              </div>
            </div>

            <!-- Enhanced Statistics Content -->
            <div x-show="!contactsLoading && !statisticsLoading">
              
              <!-- ===== ENHANCED STATISTICS CARDS v24.9 ===== -->
              <div class="mb-8">
                <h2 class="admin-subtitle mb-4">üìà Zeitraum-Analyse</h2>
                <div class="admin-stats-grid">
                  <div class="admin-stat-card">
                    <div class="admin-stat-icon">üìÖ</div>
                    <div class="admin-stat-content">
                      <div class="admin-stat-value" x-text="enhancedStats.timeframe.thisWeek"></div>
                      <div class="admin-stat-label">Diese Woche</div>
                    </div>
                  </div>
                  
                  <div class="admin-stat-card">
                    <div class="admin-stat-icon">üìä</div>
                    <div class="admin-stat-content">
                      <div class="admin-stat-value" x-text="enhancedStats.timeframe.thisMonth"></div>
                      <div class="admin-stat-label">Dieser Monat</div>
                    </div>
                  </div>
                  
                  <div class="admin-stat-card">
                    <div class="admin-stat-icon">üìà</div>
                    <div class="admin-stat-content">
                      <div class="admin-stat-value" x-text="enhancedStats.conversion.rate + '%'"></div>
                      <div class="admin-stat-label">Conversion Rate</div>
                    </div>
                  </div>
                  
                  <div class="admin-stat-card">
                    <div class="admin-stat-icon">üéØ</div>
                    <div class="admin-stat-content">
                      <div class="admin-stat-value" x-text="enhancedStats.types.leadPercentage + '%'"></div>
                      <div class="admin-stat-label">Lead-Anteil</div>
                    </div>
                  </div>
                </div>
              </div>
              
              <!-- ===== SERVICE PERFORMANCE v24.9 ===== -->
              <div class="mb-8">
                <h2 class="admin-subtitle mb-4">üéØ Service-Performance</h2>
                <div class="admin-card">
                  <div class="admin-card-body">
                    <template x-if="serviceBreakdown.services.length > 0">
                      <div class="space-y-4">
                        <template x-for="service in serviceBreakdown.services" :key="service.service">
                          <div class="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                            <div class="flex-1">
                              <div class="font-medium text-gray-900 dark:text-white" x-text="service.service"></div>
                              <div class="text-sm text-gray-500 dark:text-gray-400">
                                <span x-text="service.count"></span> Anfragen 
                                (<span x-text="service.percentage"></span>%)
                              </div>
                            </div>
                            <div class="w-24 bg-gray-200 dark:bg-gray-600 rounded-full h-3">
                              <div 
                                class="bg-primary-gold h-3 rounded-full transition-all duration-300"
                                :style="`width: ${service.percentage}%`"
                              ></div>
                            </div>
                          </div>
                        </template>
                      </div>
                    </template>
                    <template x-if="serviceBreakdown.services.length === 0">
                      <div class="text-center py-8 text-gray-500 dark:text-gray-400">
                        üì≠ Noch keine Service-Daten verf√ºgbar
                      </div>
                    </template>
                  </div>
                </div>
              </div>
              
              <!-- ===== PEAK TIME ANALYSIS v24.9 ===== -->
              <div class="mb-8">
                <h2 class="admin-subtitle mb-4">‚è∞ Peak-Time Analyse</h2>
                <div class="admin-grid-2">
                  <div class="admin-card">
                    <div class="admin-card-body">
                      <h3 class="font-semibold text-gray-900 dark:text-white mb-3">üïê Aktivste Stunden</h3>
                      <template x-if="timeAnalysis.peak.hours.length > 0">
                        <div class="space-y-2">
                          <template x-for="hour in timeAnalysis.peak.hours" :key="hour.hour">
                            <div class="flex justify-between items-center">
                              <span class="text-sm font-medium" x-text="hour.timeDisplay"></span>
                              <span class="text-xs bg-primary-gold/20 text-primary-gold px-2 py-1 rounded">
                                <span x-text="hour.count"></span> (<span x-text="hour.percentage"></span>%)
                              </span>
                            </div>
                          </template>
                        </div>
                      </template>
                      <template x-if="timeAnalysis.peak.hours.length === 0">
                        <p class="text-sm text-gray-500 dark:text-gray-400">Keine Daten verf√ºgbar</p>
                      </template>
                    </div>
                  </div>
                  
                  <div class="admin-card">
                    <div class="admin-card-body">
                      <h3 class="font-semibold text-gray-900 dark:text-white mb-3">üìÖ Aktivster Tag & Zeitslot</h3>
                      <div class="space-y-3">
                        <template x-if="timeAnalysis.peak.day">
                          <div>
                            <span class="text-sm text-gray-600 dark:text-gray-300">Bester Wochentag:</span>
                            <div class="font-medium text-primary-gold" x-text="timeAnalysis.peak.day.day"></div>
                            <div class="text-xs text-gray-500" x-text="timeAnalysis.peak.day.count + ' Anfragen'"></div>
                          </div>
                        </template>
                        
                        <template x-if="timeAnalysis.peak.timeSlot">
                          <div>
                            <span class="text-sm text-gray-600 dark:text-gray-300">Beste Tageszeit:</span>
                            <div class="font-medium text-primary-gold" x-text="timeAnalysis.peak.timeSlot.slot"></div>
                            <div class="text-xs text-gray-500" x-text="timeAnalysis.peak.timeSlot.count + ' Anfragen'"></div>
                          </div>
                        </template>
                        
                        <template x-if="!timeAnalysis.peak.day && !timeAnalysis.peak.timeSlot">
                          <p class="text-sm text-gray-500 dark:text-gray-400">Keine Daten verf√ºgbar</p>
                        </template>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- ===== BASIC STATISTICS (BESTEHEND) ===== -->
              <div class="mb-8">
                <h2 class="admin-subtitle mb-4">üìä Status-√úbersicht</h2>
                <div class="admin-stats-grid">
                  <div class="admin-stat-card">
                    <div class="admin-stat-icon">üî¥</div>
                    <div class="admin-stat-content">
                      <div class="admin-stat-value" x-text="stats.new"></div>
                      <div class="admin-stat-label">Neue Anfragen</div>
                    </div>
                  </div>
                  
                  <div class="admin-stat-card">
                    <div class="admin-stat-icon">üü°</div>
                    <div class="admin-stat-content">
                      <div class="admin-stat-value" x-text="stats.contacted"></div>
                      <div class="admin-stat-label">In Bearbeitung</div>
                    </div>
                  </div>
                  
                  <div class="admin-stat-card">
                    <div class="admin-stat-icon">‚úÖ</div>
                    <div class="admin-stat-content">
                      <div class="admin-stat-value" x-text="stats.converted"></div>
                      <div class="admin-stat-label">Abgeschlossen</div>
                    </div>
                  </div>
                  
                  <div class="admin-stat-card">
                    <div class="admin-stat-icon">üìä</div>
                    <div class="admin-stat-content">
                      <div class="admin-stat-value" x-text="stats.total"></div>
                      <div class="admin-stat-label">Gesamt</div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Filter Buttons (BESTEHEND) -->
              <div class="admin-filter-container">
                <button 
                  @click="filterStatus = 'alle'"
                  :class="filterStatus === 'alle' ? 'admin-filter-btn admin-filter-btn-active' : 'admin-filter-btn'"
                >
                  Alle Anfragen (<span x-text="contacts.length"></span>)
                </button>
                <button 
                  @click="filterStatus = 'aktiv'"
                  :class="filterStatus === 'aktiv' ? 'admin-filter-btn admin-filter-btn-active' : 'admin-filter-btn'"
                >
                  ‚úÖ Nur Aktive (<span x-text="getActiveCount()"></span>)
                </button>
                <button 
                  @click="filterStatus = 'neu'"
                  :class="filterStatus === 'neu' ? 'admin-filter-btn admin-filter-btn-active' : 'admin-filter-btn'"
                >
                  üî¥ Neu (<span x-text="getStatusCount('neu')"></span>)
                </button>
                <button 
                  @click="filterStatus = 'offen'"
                  :class="filterStatus === 'offen' ? 'admin-filter-btn admin-filter-btn-active' : 'admin-filter-btn'"
                >
                  üü° Offen (<span x-text="getStatusCount('offen')"></span>)
                </button>
                <button 
                  @click="filterStatus = 'abgeschlossen'"
                  :class="filterStatus === 'abgeschlossen' ? 'admin-filter-btn admin-filter-btn-active' : 'admin-filter-btn'"
                >
                  ‚úÖ Abgeschlossen (<span x-text="getStatusCount('abgeschlossen')"></span>)
                </button>
              </div>

              <!-- Contacts Table -->
              <div class="admin-card">
                <div class="admin-table-container">
                  <table class="admin-table">
                    <thead>
                      <tr>
                        <th>Datum & Zeit</th>
                        <th>Name</th>
                        <th>Kontakt</th>
                        <th>Status</th>
                        <th>Lead</th>
                        <th>Service</th>
                        <th>Aktionen</th>
                      </tr>
                    </thead>
                    <tbody>
                      <template x-for="contact in filteredContacts()" :key="contact.id">
                        <tr>
                          <td>
                            <div class="text-sm font-medium" x-text="formatDate(contact.created_at)"></div>
                            <div class="text-xs text-gray-500 dark:text-gray-400" x-text="getRelativeTime(contact.created_at)"></div>
                          </td>
                          <td>
                            <div class="font-medium" x-text="contact.name"></div>
                          </td>
                          <td>
                            <div class="text-sm" x-text="contact.email"></div>
                            <div class="text-xs text-gray-500 dark:text-gray-400" x-text="contact.phone"></div>
                          </td>
                          <td>
                            <span :class="getStatusClass(contact.status)">
                              <span x-text="getStatusIcon(contact.status)"></span>
                              <span x-text="contact.status"></span>
                            </span>
                          </td>
                          <td class="text-center">
                            <div x-show="contact.leadForm">
                              <span class="text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded-full font-medium">
                                üéØ Lead
                              </span>
                            </div>
                            <div x-show="!contact.leadForm">
                              <span class="text-gray-400 dark:text-gray-500 text-xs">-</span>
                            </div>
                          </td>
                          <td>
                            <div class="text-xs text-gray-600 dark:text-gray-300" x-text="contact.source_page || 'Unbekannt'"></div>
                            <div class="text-xs text-gray-500 dark:text-gray-400" x-text="contact.time_slot || ''"></div>
                          </td>
                          <td>
                            <button 
                              @click="selectedContact = contact"
                              class="admin-btn-link"
                            >
                              üìã Details
                            </button>
                          </td>
                        </tr>
                      </template>
                    </tbody>
                  </table>
                </div>
                
                <!-- Empty State -->
                <div x-show="filteredContacts().length === 0" class="text-center py-12">
                  <div class="text-6xl mb-4">üì≠</div>
                  <p class="text-gray-500 dark:text-gray-400">
                    <span x-show="filterStatus === 'alle'">Keine Kontaktanfragen gefunden.</span>
                    <span x-show="filterStatus !== 'alle'">Keine Kontakte mit Status "<span x-text="filterStatus"></span>" gefunden.</span>
                  </p>
                  <button @click="loadAllData()" class="admin-btn admin-btn-primary mt-4">
                    üîÑ Neu laden
                  </button>
                </div>
              </div>

              <!-- ===== CONTACT DETAIL MODAL (ERWEITERT) ===== -->
              <div x-show="selectedContact" class="admin-modal-overlay" style="display: none;" @click.self="selectedContact = null">
                <div class="admin-modal-content">
                  <div class="admin-modal-header">
                    <h3 class="admin-subtitle mb-0">üìã Kontaktdetails & Statistics</h3>
                    <button @click="selectedContact = null" class="admin-btn-close">‚úï</button>
                  </div>
                  
                  <div class="admin-modal-body">
                    <template x-if="selectedContact">
                      <div class="admin-space-y-6">
                        
                        <!-- ===== ENHANCED STATISTICS INFO v24.9 ===== -->
                        <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-4">
                          <h4 class="font-semibold text-blue-800 dark:text-blue-200 mb-2">üìä Enhanced Statistics</h4>
                          <div class="grid grid-cols-2 gap-4 text-sm">
                            <div>
                              <span class="text-blue-600 dark:text-blue-300">Service-Seite:</span>
                              <div class="font-medium" x-text="selectedContact.source_page || 'Unbekannt'"></div>
                            </div>
                            <div>
                              <span class="text-blue-600 dark:text-blue-300">Zeitslot:</span>
                              <div class="font-medium" x-text="selectedContact.time_slot || 'Unbekannt'"></div>
                            </div>
                            <div>
                              <span class="text-blue-600 dark:text-blue-300">Wochentag:</span>
                              <div class="font-medium" x-text="selectedContact.contact_day_of_week || 'Unbekannt'"></div>
                            </div>
                            <div>
                              <span class="text-blue-600 dark:text-blue-300">Device:</span>
                              <div class="font-medium" x-text="selectedContact.device || 'Unbekannt'"></div>
                            </div>
                          </div>
                        </div>
                        
                        <!-- ===== LEAD STATUS MANAGEMENT ===== -->
                        <div x-show="selectedContact.leadForm">
                          <div class="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4">
                            <div class="flex items-center justify-between">
                              <div class="flex items-center">
                                <span class="text-green-800 dark:text-green-200 text-sm">
                                  üéØ <strong>Lead-Kontakt:</strong> Kam √ºber Lead-Formular
                                </span>
                              </div>
                              <button 
                                @click="updateContactLeadStatus(selectedContact.id, false)"
                                class="text-xs text-green-600 dark:text-green-400 hover:text-green-800 dark:hover:text-green-200 underline"
                              >
                                Als normalen Kontakt markieren
                              </button>
                            </div>
                          </div>
                        </div>
                        
                        <div x-show="!selectedContact.leadForm">
                          <div class="bg-gray-50 dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg p-4">
                            <div class="flex items-center justify-between">
                              <span class="text-gray-700 dark:text-gray-300 text-sm">
                                üìã <strong>Normaler Kontakt</strong>
                              </span>
                              <button 
                                @click="updateContactLeadStatus(selectedContact.id, true)"
                                class="text-xs text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200 underline"
                              >
                                Als Lead markieren
                              </button>
                            </div>
                          </div>
                        </div>
                        
                        <!-- Kontakt Info Grid -->
                        <div class="admin-grid-2">
                          <div>
                            <label class="admin-label">Name</label>
                            <input 
                              type="text"
                              x-model="selectedContact.name"
                              class="admin-input"
                              placeholder="Name eingeben..."
                            >
                          </div>
                          <div>
                            <label class="admin-label">E-Mail</label>
                            <input 
                              type="email"
                              x-model="selectedContact.email"
                              class="admin-input"
                              placeholder="E-Mail eingeben..."
                            >
                          </div>
                          <div>
                            <label class="admin-label">Telefon</label>
                            <input 
                              type="tel"
                              x-model="selectedContact.phone"
                              class="admin-input"
                              placeholder="Telefon eingeben..."
                            >
                          </div>
                          <div>
                            <label class="admin-label">Unternehmen</label>
                            <input 
                              type="text"
                              x-model="selectedContact.company"
                              class="admin-input"
                              placeholder="Unternehmen eingeben..."
                            >
                          </div>
                          <div class="admin-grid-2-span">
                            <label class="admin-label">Erstellt</label>
                            <p class="admin-text">
                              <span x-text="formatDate(selectedContact.created_at)"></span>
                              <span class="text-xs ml-2" x-text="'(' + getRelativeTime(selectedContact.created_at) + ')'"></span>
                            </p>
                          </div>
                        </div>
                        
                        <!-- Nachricht -->
                        <div>
                          <label class="admin-label">Nachricht</label>
                          <textarea 
                            x-model="selectedContact.message"
                            rows="3"
                            class="admin-textarea"
                            placeholder="Nachricht eingeben..."
                          ></textarea>
                        </div>
                        
                        <!-- Status -->
                        <div>
                          <label for="status" class="admin-label">Status</label>
                          <select 
                            id="status"
                            :value="selectedContact.status"
                            @change="updateContactStatus(selectedContact.id, $event.target.value)"
                            class="admin-select"
                          >
                            <option value="neu">üî¥ Neu</option>
                            <option value="offen">üü° Offen</option>
                            <option value="abgeschlossen">‚úÖ Abgeschlossen</option>
                          </select>
                        </div>
                        
                        <!-- Notizen -->
                        <div>
                          <label for="notes" class="admin-label">Notizen</label>
                          <textarea 
                            id="notes"
                            x-model="selectedContact.notes"
                            rows="4"
                            placeholder="Interne Notizen hinzuf√ºgen..."
                            class="admin-textarea"
                          ></textarea>
                        </div>
                        
                        <!-- Action Buttons -->
                        <div class="flex flex-col sm:flex-row gap-3 pt-4">
                          <button 
                            @click="saveContactDetails(selectedContact.id, {
                              name: selectedContact.name,
                              email: selectedContact.email,
                              phone: selectedContact.phone,
                              company: selectedContact.company,
                              message: selectedContact.message,
                              notes: selectedContact.notes
                            }); selectedContact = null"
                            class="admin-btn admin-btn-primary"
                          >
                            üíæ Speichern & Schlie√üen
                          </button>
                          <button 
                            @click="selectedContact = null"
                            class="admin-btn admin-btn-secondary"
                          >
                            ‚ùå Abbrechen
                          </button>
                        </div>
                      </div>
                    </template>
                  </div>
                </div>
              </div>
            </div>
          </div>

        </div>
      </div>
    </section>
  </main>
  
  <Footer />
  
  <!-- Globale JavaScript Variablen f√ºr Alpine.js (Astro Build kompatibel) -->
  <script define:vars={{ adminUsername, adminPassword }}>
    // Environment Variables sicher in globale Variable laden
    window.ADMIN_CREDENTIALS = {
      username: adminUsername,
      password: adminPassword
    };
    
    console.log('üîê Environment Variables loaded for Enhanced Statistics Dashboard v24.9:', {
      username: adminUsername,
      hasPassword: !!adminPassword,
      fromEnvVars: !!(adminUsername !== 'admin' || adminPassword !== 'admin')
    });
  </script>
  
  <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
</Layout>