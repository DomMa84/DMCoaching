---
// Layout.astro v1.3.1 - Force Desktop System deaktiviert f√ºr Header v1.9.1 Kompatibilit√§t
// CHANGELOG v1.3.1:
// - ‚úÖ FIX: Force Desktop JavaScript deaktiviert (blockierte Header v1.9.1)
// - ‚úÖ FIX: CSS Mobile Menu Override entfernt (Header v1.9.1 kann funktionieren)
// - ‚úÖ KEEP: PWA Detection + Service Worker + alle anderen Funktionen
// - ‚úÖ KEEP: Alle CSS-Animationen und Layouts

export interface Props {
  title: string;
  description?: string;
}

const { title, description } = Astro.props;
---

<!DOCTYPE html>
<html lang="de" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description || "Dominik Maier - Interim Management & Business Consulting"} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    
    <!-- DNS Prefetch f√ºr externe Ressourcen -->
    <link rel="dns-prefetch" href="//fonts.googleapis.com">
    <link rel="dns-prefetch" href="//fonts.gstatic.com">
    <link rel="dns-prefetch" href="//images.unsplash.com">
    <link rel="dns-prefetch" href="//unpkg.com">
    
    <!-- Critical Resource Preloading -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    
    <!-- Manifest f√ºr PWA Features -->
    <link rel="manifest" href="/manifest.json">
    <meta name="theme-color" content="#D2AE6C">
    
    <!-- ORIGINAL FONTS -->
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <title>{title}</title>
    
    <!-- AOS Animation Library -->
    <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet">
    <script src="https://unpkg.com/aos@2.3.1/dist/aos.js" defer></script>
    
    <!-- Alpine.js -->
    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
  </head>
  <body class="bg-white dark:bg-gray-900 text-gray-900 dark:text-white font-sans antialiased">
    <slot />
    
    <!-- PWA Detection (ohne Force Desktop Override) -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        console.log('üéØ PWA Detection v1.3.1 - Header v1.9.1 Kompatibel...');
        
        // PWA Detection (nur f√ºr Logging)
        const isPWA = window.matchMedia('(display-mode: standalone)').matches;
        const isWideScreen = window.innerWidth >= 1200;
        const isSuperWide = window.innerWidth >= 1400;
        const screenInfo = `${window.innerWidth}x${window.innerHeight}`;
        
        console.log('üì± PWA Mode:', isPWA);
        console.log('üíª Wide Screen (1200px+):', isWideScreen, `(${screenInfo})`);
        console.log('üñ•Ô∏è Super Wide (1400px+):', isSuperWide);
        
        // ‚úÖ FORCE DESKTOP SYSTEM DEAKTIVIERT - Header v1.9.1 √ºbernimmt Kontrolle
        console.log('üö´ Force Desktop System DEAKTIVIERT - Header v1.9.1 hat Kontrolle');
        
        // PWA Klassen f√ºr CSS (ohne JavaScript Override)
        if (isPWA && isWideScreen) {
          document.body.classList.add('pwa-desktop-mode');
          console.log('üì± PWA Desktop Mode - CSS only');
        } else if (isPWA && !isWideScreen) {
          document.body.classList.add('pwa-mobile-mode');
          console.log('üì± PWA Mobile Mode - CSS only');
        } else {
          document.body.classList.add('browser-mode');
          console.log('üåê Regular Browser Mode - CSS only');
          
          if (window.innerWidth >= 1200) {
            document.body.classList.add('browser-desktop-mode');
            console.log('üíª Browser Desktop Mode - CSS only');
          }
        }
        
        console.log('‚úÖ Layout v1.3.1 - Header v1.9.1 kann ungest√∂rt funktionieren');
      });
    </script>

    <!-- Service Worker Registration -->
    <script>
      if ('serviceWorker' in navigator) {
        window.addEventListener('load', async () => {
          try {
            const registration = await navigator.serviceWorker.register('/sw.js');
            console.log('‚úÖ Service Worker registered:', registration.scope);
            
            registration.addEventListener('updatefound', () => {
              const newWorker = registration.installing;
              if (newWorker) {
                newWorker.addEventListener('statechange', () => {
                  if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                    console.log('üîÑ Service Worker update available');
                  }
                });
              }
            });
          } catch (error) {
            console.log('‚ùå Service Worker registration failed:', error);
          }
        });
      }
    </script>

    <!-- Core Web Vitals Monitoring -->
    <script>
      if ('performance' in window && 'PerformanceObserver' in window) {
        try {
          new PerformanceObserver((entryList) => {
            const entries = entryList.getEntries();
            const lastEntry = entries[entries.length - 1];
            console.log('üìä LCP:', Math.round(lastEntry.startTime), 'ms');
          }).observe({entryTypes: ['largest-contentful-paint']});
        } catch (e) {
          console.log('LCP monitoring not supported');
        }

        try {
          let clsValue = 0;
          new PerformanceObserver((entryList) => {
            for (const entry of entryList.getEntries()) {
              if (!entry.hadRecentInput) {
                clsValue += entry.value;
              }
            }
            console.log('üìä CLS:', clsValue.toFixed(3));
          }).observe({entryTypes: ['layout-shift']});
        } catch (e) {
          console.log('CLS monitoring not supported');
        }

        window.addEventListener('load', () => {
          const perfData = performance.getEntriesByType('navigation')[0];
          if (perfData) {
            const loadTime = perfData.loadEventEnd - perfData.loadEventStart;
            console.log('üìä Page Load Time:', Math.round(loadTime), 'ms');
          }
        });
      }
    </script>

    <!-- Link Prefetching -->
    <script>
      if ('connection' in navigator && navigator.connection.effectiveType !== 'slow-2g') {
        let prefetchTimer;
        
        document.addEventListener('mouseover', (e) => {
          const link = e.target.closest('a[href^="/"]');
          if (link && !link.hasAttribute('data-prefetched')) {
            prefetchTimer = setTimeout(() => {
              const prefetchLink = document.createElement('link');
              prefetchLink.rel = 'prefetch';
              prefetchLink.href = link.href;
              document.head.appendChild(prefetchLink);
              link.setAttribute('data-prefetched', 'true');
            }, 100);
          }
        });

        document.addEventListener('mouseout', () => {
          clearTimeout(prefetchTimer);
        });
      }
    </script>
    
    <!-- AOS & Dark Mode Initialization -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        if (typeof AOS !== 'undefined') {
          AOS.init({
            duration: 1000,
            easing: 'ease-in-out',
            once: true,
            offset: 100
          });
        } else {
          console.warn('AOS library not loaded, skipping animation initialization');
        }
        
        if (localStorage.getItem('theme') === 'dark' || (!localStorage.getItem('theme') && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }
      });
    </script>
  </body>
</html>

<style is:global>
  /* RESET & BASE STYLES */
  * {
    box-sizing: border-box;
    scrollbar-width: thin;
    scrollbar-color: #D2AE6C #f1f5f9;
  }
  
  *::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }
  
  *::-webkit-scrollbar-thumb {
    background: #D2AE6C;
    border-radius: 4px;
    transition: background-color 0.3s ease;
  }
  
  *::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 4px;
  }
  
  ::selection {
    background-color: rgba(210, 174, 108, 0.3);
    color: inherit;
  }
  
  html {
    font-family: 'Montserrat', system-ui, sans-serif;
    scroll-behavior: smooth;
  }

  body {
    overflow-x: hidden;
  }

  /* DARK MODE STYLES */
  .dark {
    color-scheme: dark;
  }

  .dark *::-webkit-scrollbar-track {
    background: #374151;
  }

  /* ===== COLOR SYSTEM ===== */
  :root {
    --primary-gold: #D2AE6C;
    --primary-gold-80: rgba(210, 174, 108, 0.8);
    --primary-gold-60: rgba(210, 174, 108, 0.6);
    --primary-gold-50: rgba(210, 174, 108, 0.5);
    --primary-gold-30: rgba(210, 174, 108, 0.3);
    --primary-gold-25: rgba(210, 174, 108, 0.25);
    --primary-gold-20: rgba(210, 174, 108, 0.2);
    --primary-gold-15: rgba(210, 174, 108, 0.15);
    --primary-gold-10: rgba(210, 174, 108, 0.1);
    --black-85: rgba(0, 0, 0, 0.85);
    --black-60: rgba(0, 0, 0, 0.6);
    --white-90: rgba(255, 255, 255, 0.9);
    --white-80: rgba(255, 255, 255, 0.8);
  }

  /* ===== HERO SECTION STYLES ===== */
  .hero-content {
    position: relative;
    z-index: 10;
  }

  .hero-background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, 
      rgba(210, 174, 108, 0.1) 0%, 
      rgba(210, 174, 108, 0.05) 50%, 
      transparent 100%);
    z-index: 1;
  }

  .hero-text-white h1 {
    color: white;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
  }

  .hero-text-white p {
    color: white;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  }

  /* VALUE TILES STYLING */
  .value-tile-improved {
    padding: 2rem;
    text-align: center;
    transition: all 0.3s ease;
  }

  .value-circle-large {
    width: 120px;
    height: 120px;
    margin: 0 auto 1.5rem auto;
    position: relative;
  }

  .value-circle-text {
    font-size: 1.25rem;
    font-weight: 700;
    color: #D2AE6C;
  }

  /* DESKTOP GRID LAYOUTS */
  .services-desktop-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 2rem;
  }

  .value-desktop-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 2rem;
  }

  .process-desktop-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 2rem;
  }

  .process-step-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
  }

  .process-step-box {
    padding: 1.5rem;
    margin-top: 1rem;
  }

  /* DESKTOP GRID FORCE-FIX f√ºr PWA Browser-Mode (OHNE Header Override) */
  @media (min-width: 900px) {
    .services-desktop-grid {
      display: grid !important;
      grid-template-columns: repeat(2, minmax(0, 1fr)) !important;
      gap: 2rem !important;
    }
    
    .value-desktop-grid {
      display: grid !important;
      grid-template-columns: repeat(2, minmax(0, 1fr)) !important;
      gap: 2rem !important;
    }
    
    .process-desktop-grid {
      display: grid !important;
      grid-template-columns: repeat(2, minmax(0, 1fr)) !important;
      gap: 2rem !important;
    }
  }

  /* ‚úÖ HEADER OVERRIDE ENTFERNT - Header v1.9.1 hat volle Kontrolle */
  /* ALTE PROBLEMATISCHE REGELN ENTFERNT:
  @media (min-width: 1200px) {
    #mobile-menu-toggle { display: none !important; }
    .hidden.lg\:flex { display: flex !important; }
  }
  */

  /* ===== PWA BROWSER CSS OVERRIDE SYSTEM (NUR GRID LAYOUTS) ===== */
  
  /* Force Desktop Mode - NUR f√ºr Grid Layouts (nicht Header) */
  .force-desktop-mode .services-desktop-grid,
  .force-desktop-mode .value-desktop-grid,
  .force-desktop-mode .process-desktop-grid,
  .browser-desktop-mode .services-desktop-grid,
  .browser-desktop-mode .value-desktop-grid,
  .browser-desktop-mode .process-desktop-grid,
  .force-desktop-layout .services-desktop-grid,
  .force-desktop-layout .value-desktop-grid,
  .force-desktop-layout .process-desktop-grid {
    display: grid !important;
    grid-template-columns: repeat(2, minmax(0, 1fr)) !important;
    gap: 2rem !important;
  }
  
  /* Force Desktop Grid Class */
  .force-desktop-grid {
    display: grid !important;
    grid-template-columns: repeat(2, minmax(0, 1fr)) !important;
    gap: 2rem !important;
  }
  
  /* Container Optimization f√ºr Force Desktop Mode */
  .force-desktop-mode .container,
  .browser-desktop-mode .container {
    max-width: 1200px !important;
    margin: 0 auto !important;
  }

  /* LEGACY PWA Desktop Mode Overrides (f√ºr echte PWAs) - NUR Grid Layouts */
  .pwa-desktop-mode .services-desktop-grid,
  .pwa-desktop-mode .value-desktop-grid,
  .pwa-desktop-mode .process-desktop-grid {
    display: grid !important;
    grid-template-columns: repeat(2, minmax(0, 1fr)) !important;
    gap: 2rem !important;
  }
  
  .pwa-desktop-mode .container {
    max-width: 1200px !important;
    margin: 0 auto !important;
  }

  /* ANIMATIONS */
  @keyframes subtle-zoom {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.02); }
  }

  @keyframes float-refined {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    25% { transform: translateY(-8px) rotate(1deg); }
    50% { transform: translateY(-12px) rotate(0deg); }
    75% { transform: translateY(-8px) rotate(-1deg); }
  }

  @keyframes draw-circle {
    from { stroke-dashoffset: 251.2; }
    to { stroke-dashoffset: 0; }
  }

  /* BUTTON STYLES */
  .btn-primary {
    background: linear-gradient(135deg, #D2AE6C 0%, #B8943A 100%);
    color: white;
    padding: 12px 32px;
    border-radius: 8px;
    font-weight: 600;
    transition: all 0.3s ease;
    border: none;
    cursor: pointer;
    text-decoration: none;
    display: inline-block;
  }

  .btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(210, 174, 108, 0.3);
    background: linear-gradient(135deg, #B8943A 0%, #D2AE6C 100%);
  }

  .btn-secondary {
    background: transparent;
    color: #D2AE6C;
    border: 2px solid #D2AE6C;
    padding: 10px 30px;
    border-radius: 8px;
    font-weight: 600;
    transition: all 0.3s ease;
    cursor: pointer;
    text-decoration: none;
    display: inline-block;
  }

  .btn-secondary:hover {
    background: #D2AE6C;
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(210, 174, 108, 0.3);
  }

  /* CARD STYLES */
  .card {
    background: white;
    border-radius: 12px;
    padding: 2rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    transition: all 0.3s ease;
    border: 1px solid rgba(210, 174, 108, 0.1);
  }

  .card:hover {
    transform: translateY(-4px);
    box-shadow: 0 12px 25px rgba(0, 0, 0, 0.1);
    border-color: rgba(210, 174, 108, 0.3);
  }

  .dark .card {
    background: #1f2937;
    border-color: rgba(210, 174, 108, 0.2);
  }

  .dark .card:hover {
    border-color: rgba(210, 174, 108, 0.4);
  }

  /* RESPONSIVE TYPOGRAPHY */
  @media (max-width: 768px) {
    h1 {
      font-size: 2rem;
    }
    
    h2 {
      font-size: 1.75rem;
    }
    
    .btn-primary,
    .btn-secondary {
      padding: 10px 24px;
      font-size: 0.9rem;
    }
  }

  /* ACCESSIBILITY */
  @media (prefers-reduced-motion: reduce) {
    * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }

  /* FOCUS STYLES */
  button:focus-visible,
  a:focus-visible {
    outline: 2px solid #D2AE6C;
    outline-offset: 2px;
  }

  /* PRINT STYLES */
  @media print {
    .no-print {
      display: none !important;
    }
    
    * {
      color: black !important;
      background: white !important;
    }
  }
</style>
