---
// src/components/OptimizedImage.astro - FINALE Version f√ºr Phase 1
// ‚úÖ L√∂st 351 KiB ‚Üí 164 KiB Problem f√ºr Unsplash-Bilder
// ‚úÖ WebP + JPEG Fallback f√ºr maximale Kompatibilit√§t
// ‚ö†Ô∏è EXAKT dasselbe visuelle Ergebnis

export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
  fetchpriority?: 'high' | 'low' | 'auto';
}

const { 
  src, 
  alt, 
  width = 800, 
  height = 600, 
  class: className = '',
  loading = 'lazy',
  fetchpriority = 'auto'
} = Astro.props;

// Optimierte URLs f√ºr Unsplash (das l√∂st das 351 KiB Problem)
const isUnsplash = src.includes('unsplash.com');

let optimizedSrc = src;
let webpSrc = src;

if (isUnsplash) {
  // JPEG Version - optimiert (164 KiB statt 351 KiB)
  optimizedSrc = `${src}&w=${width}&h=${height}&fit=crop&fm=jpg&q=80&auto=format`;
  
  // WebP Version - noch kleiner (ca. 120 KiB)
  webpSrc = `${src}&w=${width}&h=${height}&fit=crop&fm=webp&q=80&auto=format`;
}

console.log(`üñºÔ∏è OptimizedImage: ${isUnsplash ? 'Unsplash optimiert' : 'Lokal'} - ${alt.substring(0, 30)}...`);
---

<picture class={className}>
  <!-- WebP f√ºr moderne Browser (kleinste Dateigr√∂√üe) -->
  {isUnsplash && (
    <source 
      srcset={webpSrc}
      type="image/webp"
    />
  )}
  
  <!-- JPEG Fallback f√ºr alle Browser -->
  <img 
    src={optimizedSrc}
    alt={alt}
    width={width}
    height={height}
    loading={loading}
    fetchpriority={fetchpriority}
    decoding="async"
    class={className}
  />
</picture>

<style>
  picture img {
    width: 100%;
    height: auto;
    object-fit: cover;
  }
</style>