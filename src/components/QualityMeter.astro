---
// src/components/QualityMeter.astro v1.0 (Server-Mode & UX optimiert)
// Quality/Rating Meter mit Sternen - Accessibility & Business optimiert

// ✅ WICHTIG: Komponenten brauchen kein prerender - automatisch statisch im Server-Mode

interface Props {
  level: number; // 1-5 oder custom
  maxLevel?: number;
  animated?: boolean;
  size?: "xs" | "sm" | "md" | "lg" | "xl";
  label?: string; // Für Accessibility
  showLabel?: boolean;
  variant?: "stars" | "dots" | "bars";
  color?: string;
  emptyColor?: string;
  halfStar?: boolean; // Unterstützung für 4.5 Sterne etc.
  interactive?: boolean; // Hover-Effekte
  showTooltip?: boolean;
}

const { 
  level, 
  maxLevel = 5, 
  animated = true, 
  size = "md",
  label = "Qualitätsbewertung",
  showLabel = false,
  variant = "stars",
  color = "#D4AF37",
  emptyColor = "rgba(212, 175, 55, 0.2)",
  halfStar = false,
  interactive = false,
  showTooltip = false
} = Astro.props;

// Normalisierung und Half-Star Logic
const normalizedLevel = Math.min(Math.max(level, 0), maxLevel);
const fullStars = Math.floor(normalizedLevel);
const hasHalfStar = halfStar && (normalizedLevel % 1) >= 0.5;
const emptyStars = maxLevel - fullStars - (hasHalfStar ? 1 : 0);

// Size mapping erweitert
const sizeMap = {
  xs: { size: "w-3 h-3", spacing: "space-x-0.5", text: "text-xs" },
  sm: { size: "w-4 h-4", spacing: "space-x-1", text: "text-sm" },
  md: { size: "w-5 h-5", spacing: "space-x-1", text: "text-base" },
  lg: { size: "w-6 h-6", spacing: "space-x-1.5", text: "text-lg" },
  xl: { size: "w-8 h-8", spacing: "space-x-2", text: "text-xl" }
};

const sizeConfig = sizeMap[size];

// Qualitäts-Labels basierend auf Level
const getQualityLabel = (level: number, maxLevel: number) => {
  const percentage = (level / maxLevel) * 100;
  if (percentage >= 90) return "Hervorragend";
  if (percentage >= 80) return "Sehr gut";
  if (percentage >= 70) return "Gut";
  if (percentage >= 60) return "Befriedigend";
  if (percentage >= 50) return "Ausreichend";
  return "Verbesserungsbedürftig";
};

const qualityLabel = getQualityLabel(normalizedLevel, maxLevel);

// Eindeutige ID für Tooltips
const meterId = `quality-meter-${Math.random().toString(36).substr(2, 9)}`;

console.log(`⭐ QualityMeter v1.0 loaded - Level: ${normalizedLevel}/${maxLevel} (${qualityLabel}), Variant: ${variant}`);
---

<div 
  class={`quality-meter inline-flex items-center ${interactive ? 'interactive' : ''}`}
  role="img"
  aria-label={`${label}: ${normalizedLevel} von ${maxLevel} Sternen (${qualityLabel})`}
  data-level={normalizedLevel}
  data-max={maxLevel}
  id={meterId}
>
  <!-- Optional Label -->
  {showLabel && (
    <span class={`mr-2 ${sizeConfig.text} text-text-dark dark:text-text-light font-medium`}>
      {label}:
    </span>
  )}
  
  <!-- Rating Display -->
  <div class={`flex items-center ${sizeConfig.spacing}`}>
    <!-- Full Stars -->
    {Array.from({ length: fullStars }).map((_, index) => (
      <div 
        class="quality-star active" 
        data-index={index}
        data-rating={index + 1}
        style={`--star-color: ${color};`}
      >
        {variant === "stars" ? (
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class={sizeConfig.size} aria-hidden="true">
            <path fill-rule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z" clip-rule="evenodd" />
          </svg>
        ) : variant === "dots" ? (
          <div class={`${sizeConfig.size.replace('w-', 'w-').replace('h-', 'h-')} rounded-full bg-current`}></div>
        ) : (
          <div class={`${sizeConfig.size} bg-current rounded-sm`}></div>
        )}
      </div>
    ))}
    
    <!-- Half Star -->
    {hasHalfStar && (
      <div 
        class="quality-star half-star" 
        data-index={fullStars}
        data-rating={fullStars + 0.5}
        style={`--star-color: ${color}; --empty-color: ${emptyColor};`}
      >
        <div class="relative">
          {variant === "stars" ? (
            <>
              <!-- Empty Star Background -->
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class={`${sizeConfig.size} absolute`} style={`color: ${emptyColor};`} aria-hidden="true">
                <path fill-rule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z" clip-rule="evenodd" />
              </svg>
              <!-- Half Fill -->
              <div class="absolute inset-0 overflow-hidden" style="width: 50%;">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class={sizeConfig.size} style={`color: ${color};`} aria-hidden="true">
                  <path fill-rule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z" clip-rule="evenodd" />
                </svg>
              </div>
            </>
          ) : (
            <div class={`${sizeConfig.size} rounded-full relative`} style={`background: linear-gradient(90deg, ${color} 50%, ${emptyColor} 50%);`}></div>
          )}
        </div>
      </div>
    )}
    
    <!-- Empty Stars -->
    {Array.from({ length: emptyStars }).map((_, index) => (
      <div 
        class="quality-star inactive" 
        data-index={fullStars + (hasHalfStar ? 1 : 0) + index}
        data-rating={fullStars + (hasHalfStar ? 1 : 0) + index + 1}
        style={`--star-color: ${emptyColor};`}
      >
        {variant === "stars" ? (
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class={sizeConfig.size} aria-hidden="true">
            <path fill-rule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z" clip-rule="evenodd" />
          </svg>
        ) : variant === "dots" ? (
          <div class={`${sizeConfig.size} rounded-full bg-current`}></div>
        ) : (
          <div class={`${sizeConfig.size} bg-current rounded-sm`}></div>
        )}
      </div>
    ))}
  </div>
  
  <!-- Numeric Display -->
  <span class={`ml-2 ${sizeConfig.text} text-text-muted tabular-nums`}>
    <span class="quality-value">{normalizedLevel.toFixed(halfStar ? 1 : 0)}</span>
    <span class="opacity-60">/{maxLevel}</span>
  </span>
  
  <!-- Tooltip -->
  {showTooltip && (
    <div class="quality-tooltip absolute z-50 bg-dark text-white px-2 py-1 rounded text-sm opacity-0 pointer-events-none transition-opacity duration-200" style="bottom: 100%; left: 50%; transform: translateX(-50%); margin-bottom: 5px;">
      {qualityLabel} ({normalizedLevel}/{maxLevel})
      <div class="absolute top-full left-1/2 transform -translate-x-1/2 border-l-4 border-r-4 border-t-4 border-transparent border-t-dark"></div>
    </div>
  )}
</div>

<style>
  .quality-star {
    position: relative;
    cursor: default;
    transition: transform 0.2s ease;
  }
  
  .quality-star.active {
    color: var(--star-color);
    opacity: 0;
    animation: star-appear 0.5s cubic-bezier(0.4, 0, 0.2, 1) forwards;
    transform-origin: center;
  }
  
  .quality-star.half-star {
    opacity: 0;
    animation: star-appear 0.5s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }
  
  .quality-star.inactive {
    color: var(--star-color);
    opacity: 0;
    animation: star-fade 0.3s 0.8s forwards;
  }
  
  /* Sequential Animation Delays */
  .quality-star:nth-child(1) { animation-delay: 0s; }
  .quality-star:nth-child(2) { animation-delay: 0.1s; }
  .quality-star:nth-child(3) { animation-delay: 0.2s; }
  .quality-star:nth-child(4) { animation-delay: 0.3s; }
  .quality-star:nth-child(5) { animation-delay: 0.4s; }
  .quality-star:nth-child(6) { animation-delay: 0.5s; }
  .quality-star:nth-child(7) { animation-delay: 0.6s; }
  
  /* Interactive Hover Effekte */
  .interactive .quality-star:hover {
    transform: scale(1.2);
  }
  
  .interactive:hover .quality-tooltip {
    opacity: 1;
  }
  
  @keyframes star-appear {
    0% {
      opacity: 0;
      transform: scale(0.3) rotate(-30deg);
    }
    60% {
      transform: scale(1.2) rotate(15deg);
      opacity: 1;
    }
    100% {
      transform: scale(1) rotate(0deg);
      opacity: 1;
    }
  }
  
  @keyframes star-fade {
    to {
      opacity: 1;
    }
  }
  
  /* Responsive Design */
  @media (max-width: 640px) {
    .quality-meter {
      transform: scale(0.9);
    }
  }
  
  /* Accessibility - Reduced Motion */
  @media (prefers-reduced-motion: reduce) {
    .quality-star {
      animation: none !important;
      opacity: 1 !important;
      transition: none !important;
    }
    
    .quality-star:hover {
      transform: none !important;
    }
  }
  
  /* High Contrast Mode */
  @media (prefers-contrast: high) {
    .quality-star.active {
      filter: brightness(1.2);
    }
    
    .quality-star.inactive {
      opacity: 0.8;
    }
  }
  
  /* Dark Mode Optimierungen */
  @media (prefers-color-scheme: dark) {
    .quality-tooltip {
      background-color: var(--text-light, #ffffff);
      color: var(--text-dark, #000000);
    }
    
    .quality-tooltip::after {
      border-top-color: var(--text-light, #ffffff);
    }
  }
  
  /* Print Styles */
  @media print {
    .quality-star {
      animation: none;
      opacity: 1;
    }
    
    .quality-tooltip {
      display: none;
    }
  }
  
  /* Footer version info */
  .footer-version::after {
    content: "QualityMeter v1.0 - Server-Mode & UX optimiert";
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Animation restart mit Intersection Observer
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const meter = entry.target as HTMLElement;
          const stars = meter.querySelectorAll('.quality-star');
          
          // Reset and restart animations
          stars.forEach((star, index) => {
            const element = star as HTMLElement;
            element.style.animation = 'none';
            void element.offsetWidth; // Force reflow
            
            const delay = index * 0.1;
            
            if (element.classList.contains('active') || element.classList.contains('half-star')) {
              element.style.animation = `star-appear 0.5s cubic-bezier(0.4, 0, 0.2, 1) forwards ${delay}s`;
            } else {
              element.style.animation = `star-fade 0.3s ${0.8 + delay}s forwards`;
            }
          });
          
          // Animate numeric value
          const valueElement = meter.querySelector('.quality-value');
          if (valueElement) {
            const targetValue = parseFloat(meter.dataset.level || '0');
            animateValue(valueElement, 0, targetValue, 1000);
          }
        }
      });
    }, {
      threshold: 0.3,
      rootMargin: '0px 0px -50px 0px'
    });
    
    // Value animation function
    const animateValue = (element: Element, start: number, end: number, duration: number) => {
      const startTime = performance.now();
      const isDecimal = end % 1 !== 0;
      
      const animate = (currentTime: number) => {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        // Easing function
        const easeOutQuart = 1 - Math.pow(1 - progress, 4);
        const currentValue = start + (end - start) * easeOutQuart;
        
        element.textContent = isDecimal ? currentValue.toFixed(1) : Math.round(currentValue).toString();
        
        if (progress < 1) {
          requestAnimationFrame(animate);
        } else {
          element.textContent = isDecimal ? end.toFixed(1) : end.toString();
        }
      };
      
      requestAnimationFrame(animate);
    };
    
    // Observe all quality meters
    document.querySelectorAll('.quality-meter').forEach(meter => {
      observer.observe(meter);
    });
    
    // Interactive Tooltips
    document.querySelectorAll('.interactive').forEach(meter => {
      const tooltip = meter.querySelector('.quality-tooltip');
      if (tooltip) {
        meter.addEventListener('mouseenter', () => {
          tooltip.classList.add('opacity-100');
          tooltip.classList.remove('opacity-0');
        });
        
        meter.addEventListener('mouseleave', () => {
          tooltip.classList.add('opacity-0');
          tooltip.classList.remove('opacity-100');
        });
      }
    });
  });
</script>