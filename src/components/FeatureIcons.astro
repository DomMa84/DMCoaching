---
interface Props {
  count: number;
  maxCount?: number;
  size?: "sm" | "md" | "lg";
}

const { count, maxCount = 5, size = "md" } = Astro.props;
const normalizedCount = Math.min(Math.max(Math.floor(count), 1), maxCount);

// Size classes
const sizeMap = {
  sm: "w-4 h-4",
  md: "w-6 h-6",
  lg: "w-8 h-8"
};

const iconSize = sizeMap[size];

// Array of feature icon paths (you can customize these)
const featureIcons = [
  "M12 18v-5.25m0 0a6.01 6.01 0 001.5-.189m-1.5.189a6.01 6.01 0 01-1.5-.189m3.75 7.478a12.06 12.06 0 01-4.5 0m3.75 2.383a14.406 14.406 0 01-3 0M14.25 18v-.192c0-.983.658-1.823 1.508-2.316a7.5 7.5 0 10-7.517 0c.85.493 1.509 1.333 1.509 2.316V18",
  "M3.75 13.5l10.5-11.25L12 10.5h8.25L9.75 21.75 12 13.5H3.75z",
  "M9 12.75L11.25 15 15 9.75M21 12c0 1.268-.63 2.39-1.593 3.068a3.745 3.745 0 01-1.043 3.296 3.745 3.745 0 01-3.296 1.043A3.745 3.745 0 0112 21c-1.268 0-2.39-.63-3.068-1.593a3.746 3.746 0 01-3.296-1.043 3.745 3.745 0 01-1.043-3.296A3.745 3.745 0 013 12c0-1.268.63-2.39 1.593-3.068a3.745 3.745 0 011.043-3.296 3.746 3.746 0 013.296-1.043A3.746 3.746 0 0112 3c1.268 0 2.39.63 3.068 1.593a3.746 3.746 0 013.296 1.043 3.746 3.746 0 011.043 3.296A3.745 3.745 0 0121 12z",
  "M9.594 3.94c.09-.542.56-.94 1.11-.94h2.593c.55 0 1.02.398 1.11.94l.213 1.281c.063.374.313.686.645.87.074.04.147.083.22.127.324.196.72.257 1.075.124l1.217-.456a1.125 1.125 0 011.37.49l1.296 2.247a1.125 1.125 0 01-.26 1.431l-1.003.827c-.293.24-.438.613-.431.992a6.759 6.759 0 010 .255c-.007.378.138.75.43.99l1.005.828c.424.35.534.954.26 1.43l-1.298 2.247a1.125 1.125 0 01-1.369.491l-1.217-.456c-.355-.133-.75-.072-1.076.124a6.57 6.57 0 01-.22.128c-.331.183-.581.495-.644.869l-.213 1.28c-.09.543-.56.941-1.11.941h-2.594c-.55 0-1.02-.398-1.11-.94l-.213-1.281c-.062-.374-.312-.686-.644-.87a6.52 6.52 0 01-.22-.127c-.325-.196-.72-.257-1.076-.124l-1.217.456a1.125 1.125 0 01-1.369-.49l-1.297-2.247a1.125 1.125 0 01.26-1.431l1.004-.827c.292-.24.437-.613.43-.992a6.932 6.932 0 010-.255c.007-.378-.138-.75-.43-.99l-1.004-.828a1.125 1.125 0 01-.26-1.43l1.297-2.247a1.125 1.125 0 011.37-.491l1.216.456c.356.133.751.072 1.076-.124.072-.044.146-.087.22-.128.332-.183.582-.495.644-.869l.214-1.281z",
  "M19.5 5.25l-7.5 7.5-7.5-7.5m15 6l-7.5 7.5-7.5-7.5"
];
---

<div class="flex items-center justify-center space-x-2">
  {featureIcons.slice(0, maxCount).map((iconPath, index) => (
    <div 
      class={`feature-icon transition-all duration-300 ${index < normalizedCount ? 'active' : 'inactive'}`} 
      data-index={index}
    >
      <svg 
        xmlns="http://www.w3.org/2000/svg" 
        fill="none" 
        viewBox="0 0 24 24" 
        stroke-width="1.5" 
        stroke="currentColor" 
        class={`${iconSize} ${index < normalizedCount ? 'fill-current' : ''}`}
        aria-hidden="true"
      >
        <path stroke-linecap="round" stroke-linejoin="round" d={iconPath} />
      </svg>
    </div>
  ))}
</div>

<style>
  .feature-icon.active {
    color: #D4AF37;
    animation: icon-bounce 0.5s ease-out forwards;
    transform-origin: center;
  }
  
  .feature-icon.inactive {
    color: rgba(212, 175, 55, 0.3);
    transform: translateY(4px);
  }
  
  @keyframes icon-bounce {
    0% {
      transform: translateY(4px) scale(1);
      opacity: 0.3;
    }
    50% {
      transform: translateY(-5px) scale(1.1);
      opacity: 0.8;
    }
    100% {
      transform: translateY(0) scale(1);
      opacity: 1;
    }
  }
  
  /* Sequential animation */
  .feature-icon.active:nth-child(1) { animation-delay: 0s; }
  .feature-icon.active:nth-child(2) { animation-delay: 0.1s; }
  .feature-icon.active:nth-child(3) { animation-delay: 0.2s; }
  .feature-icon.active:nth-child(4) { animation-delay: 0.3s; }
  .feature-icon.active:nth-child(5) { animation-delay: 0.4s; }
</style>

<script>
  // Ensure animations run properly when elements come into view
  document.addEventListener('DOMContentLoaded', () => {
    // Handle animation restart when scrolling into view
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const icons = entry.target.querySelectorAll('.feature-icon');
          icons.forEach((icon) => {
            // Reset the animation
            icon.style.animation = 'none';
            
            // Force reflow
            void icon.offsetWidth;
            
            // Restart the animation with proper delay
            const index = parseInt(icon.getAttribute('data-index') || '0', 10);
            const delay = index * 0.1;
            
            if (icon.classList.contains('active')) {
              icon.style.animation = `icon-bounce 0.5s ease-out forwards ${delay}s`;
            }
          });
        }
      });
    }, {
      threshold: 0.3
    });
    
    // Observe all feature icon containers
    document.querySelectorAll('.flex.items-center.justify-center.space-x-2').forEach(container => {
      observer.observe(container);
    });
  });
</script>